;rutina de inicializaciÃ³n rtc_vga
;-----------------------------------------------------------------------------------------------
;-------------------------------PUERTOS DE SALIDA-----------------------------------------------

#equ DatoRTC,0x00 ;dato a RTC salida
#equ AddRTC,0x01 ;Direccion a RTC salida
#equ Dale,0x03;salida
#equ Seg_R,0x04 ; salida segundos de hora VGA
#equ Min_R,0x05 ;salida minutos de hora VGA
#equ Hor_R,0x06 ; salida hora de hora VGA
#equ Dia_F,0x07 ;salida dia de fecha VGA
#equ Mes_F,0x08 ;salida mes de fecha VGA
#equ Year_F,0x09 ;salida año de fecha VGA
#equ Seg_T,0x0A ;salida segundos de cronometro VGA
#equ Min_T,0x0B ;salida minutos de cronometro VGA
#equ Hor_T,0x0C ;salida hora de cronometro VGA
#equ CM,0x0D;seleccion de mux y banco de registros BANCO DE REGISTROS
#equ Var,0x0E ;selector de enables de programacion PS2
;#equ Sel,0x0F;selectot de mux de programacion
;----------------------------------------------------------------------------------------------
;-------------------------------PUERTOS DE ENTRADA---------------------------------------------
#equ Iniciar,0x02 ; señal de entrada para iniciar
#equ In_Data, 0x04; entrada de dato DE LECTURA
#equ PS2,0x05; INICIO EN PS2 d
#equ Param, 0x03 ; PARAMETROS DE PROGRAMACION
;#equ PF,0x07;Progrmar parametros de fecha F2
;#equ PT,0x08;Programar parametros de timer F3
;#equ OK,0x09;Enter 
#equ Dato_In,0x01;Dato de entrada de programacion
;----------------------------------------------------------------------------------------------
;ahora, se definen registros temporales
#equ Delay,s0 ; se define registro para crear retardos
#equ Data_out1,s1;direccion
#equ Data_out2,s2;dato
#equ Data_in,s3;dato de entrada
#equ Data_out3,s4;manejo de reset y perifericos
#equ Dato_SP,s7 ;dato leido de Scratch Pad Mem
#equ MP,s8 ; registro temporal de direcciones de registros de lectura
#equ Listo,s9
#equ Reloj,sA;Reg temp para almacenar valor de reloj
;#equ Fecha,sB;Reg temp para almacenar valor de fecha
;#equ Timer,sC;Reg temp para almacernar valor de timer
;#equ Enter,sD;Reg Temp para almacenar valor de timer
#equ DataProg,sE;decenas
#equ DataProg2,sD;unidades
#equ PC,sC
;-----------------------------------------------------------------------------------------------
;------------------------------------LOADS INICIALES--------------------------------------------
;se carga cada uno de los registros temporales con valor 
load Delay, 0x12 ; quiere decir 128 pulsos de 10 ns
load Data_out1,0x00;Direccion de RTC
load Data_out2,0x00;Dato de RTC
load Data_in,0x00;dato de entrada
load Data_out3,0x00;control de mux y perifericos de lectura escritura
load s5,0x00;sPMem
load Dato_SP,0x00
load PC,0x00
;call SPMem
;------------------------------------------------------------------------------------------------
;----------------------------Registros de SPMem en 0x00------------------------------------------
SPMem:
	load s5,0x00; segundos
	load Data_out2,0x00
	wrmem Data_out2,(s5)
	add s5,0x01 ;01 minutos
	load Data_out2,0x00
	wrmem Data_out2,(s5)
	add s5,0x01;02 hora
	load Data_out2,0x01
	wrmem Data_out2,(s5)
	add s5,0x01 ; 03 dia
	load Data_out2,0x01
	wrmem Data_out2,(s5)
	add s5,0x01; 04 mes
	load Data_out2,0x06
	wrmem Data_out2,(s5)
	add s5,0x01;05 year
	load Data_out2,0x16
	wrmem Data_out2,(s5)
	add s5,0x01;06 segundos crono
	load Data_out2,0x00
	wrmem Data_out2, (s5)
	add s5,0x01 ; 07 minutos crono
	wrmem Data_out2, (s5)
	add s5,0x01 ;08 hora crono
	wrmem Data_out2, (s5)	
	load s5,0x00
;------------------------------------------------------------------------------------------------
	
inicio:
	rdPrt Data_in,Iniciar
	comp Data_in,0x02
	jump NZ, inicio
	load Data_out3,0x38
    wrPrt Data_out3,Dale
    load Data_out3,0x18
	wrPrt Data_out3,Dale
	wrPrt PC,Var
	call Inicializacion
	call start
	
start:
	call Leer
	call Control_VGA
	rdPrt Listo,PS2
	comp Listo,0x01
	Call Z Parametros
	rdPrt Data_in,Iniciar
	comp Data_in,0x02
	jump NZ, SPMem
	jump start 
;funcion que permite generar seÃ±ales de salida basado en seÃ±ales de entrada.
Inicializacion:
	call RegInicia
    call RegClock
    call RegFecha
    call RegTimer
    load Data_out1,0xF0
    load Data_out2,0xF0
    call Write
	ret	
;-----------------------------------------------------------------------------------------
;-----------------------------RETRASO-----------------------------------------------------	
Retraso:        ;funcion para generar retrasos
   sub Delay,0x01
   jump NZ, Retraso
   load Delay, 0x12
   ret 
;-----------------------------------------------------------------------------------------
;---------------------------WRITE---------------------------------------------------------
Write:
   wrPrt Data_out1,AddRTC;direccion en puerto
   wrPrt Data_out2,DatoRTC;dato en puerto
   load Data_out3,0x11;carga dato para habilitar perifericos de escritura
   wrPrt Data_out3,Dale; habilita ciclo de envio de señales de control
   load Data_out3,0x18
   call Retraso
   wrPrt Data_out3,Dale
   ret
;------------------------------------------------------------------------------------------
;-------------------------READ--------------------------------------------------------------
Read:
   wrPrt Data_out1,AddRTC ;pone en el puerto de salida dirección
   load Data_out3,0x0E
   wrPrt Data_out3, Dale ;habilita señales de control de RTC
   wrPrt MP,CM
   load Data_out3, 0x1C 
   call Retraso ;realiza el retraso que permite leer el dato
   wrPrt Data_out3, Dale ;habilita señales de control de RTC
   ret
 ;------------------------------------------------------------------------------------------
 ;------------------------------LEER DATO DE REGISTRO---------------------------------------
Read_Data:
   wrPrt MP,CM
   rdPrt s6,In_Data;lee puerto
   wrmem s6,(s5);guarda dato en scratchpad 
   add s5,0x01;actualiza la dirección de memoria
   ret
;-------------------------------------------------------------------------------------------
;--------------------------COMANDOS DE LECTURA----------------------------------------------
Read_Comand:
   wrPrt Data_out1,AddRTC;direccion en puerto
   wrPrt Data_out2,DatoRTC;dato en puerto
   load Data_out3,0x0E;carga dato para habilitar perifericos de escritura
   wrPrt Data_out3,Dale; habilita ciclo de envio de señales de control
   load Data_out3,0x18
   call Retraso
   wrPrt Data_out3,Dale
   ret
;--------------------------------------------------------------------------------------------
;----------------------------LEER------------------------------------------------------------
Leer:
	load Data_out1, 0xF0;
	load Data_out2, 0xF0;
	call Read_Comand
	load Data_out1,0x21
	load MP,0x02
	call Read
	load MP,0x00
	call Read_Data
	load Data_out1, 0x22
	load MP,0x12
	call Read
	load MP,0x10
	call Read_Data
	load Data_out1,0x23
	load MP,0x22
	call Read
	load MP,0x20
	call Read_Data
	load Data_out1,0x24
	load MP,0x32
	call Read
	load MP,0x30
	call Read_Data
	load Data_out1,0x25
	load MP,0x42
	call Read
	load MP,0x40
	call Read_Data
	load Data_out1,0x26
	load MP,0x52
	call Read
	load MP,0x50
	call Read_Data
	load Data_out1,0x41
	load MP,0x62
	call Read
	load MP,0x60
	call Read_Data
	load Data_out1,0x42
	load MP,0x72
	call Read
	load MP,0x70
	call Read_Data
	load Data_out1,0x43
	load MP,0x82
	call Read
	load MP,0x80
	call Read_Data
	load s5,0x00
	ret
;--------------------------------------------------------------------------------------------
;-----------------PROGRAMAR PARAMETROS DE INICIALIZACION------------------------------------
RegInicia:
   load Data_out1,0x02 ;reg status 02
   load Data_out2,0x10 ;bit de ini en alto
   call Write 
   load Data_out1,0x02;reg status 02
   load Data_out2,0x00;bit de ini bajo
   call Write
   load Data_out1,0x10
   load Data_out2,0xD2
   call Write
   load Data_out1,0x01
   load Data_out2,0x04
   call Write
   load Data_out1,0x00
   load Data_out2,0x00
   call Write 
   ret	
;---------------------------------------------------------------------------------------------
;-----------------------------PROGRAMAR PARAMETROS DE RELOJ----------------------------------
RegClock:
   load s5,0x00
   load Data_out1,0x21
   rdmem Data_out2,(s5)
   call Write
   add s5,0x01
   load Data_out1,0x22
   rdmem Data_out2,(s5)
   call Write
   add s5,0x01
   load Data_out1,0x23
   rdmem Data_out2,(s5)
   call Write
   ret	
;--------------------------------------------------------------------------------------------
;---------------------------PROGRAMAR PARAMETROS DE FECHA-----------------------------------
RegFecha:
   load s5,0x03
   load Data_out1,0x24
   rdmem Data_out2,(s5)
   call Write
   add s5,0x01
   load Data_out1,0x25
   rdmem Data_out2,(s5)
   call Write
   add s5,0x01
   load Data_out1,0x26
   rdmem Data_out2,(s5)
   call Write 
   load s5,0x00
   ret	
;------------------------------------------------------------------------------------------
;-----------------------------------PROGRAMAR PARAMETROS DE TIMER--------------------------
RegTimer:
   load s5,0x06
   load Data_out1,0x41
   rdmem Data_out2,(s5)
   wrPrt Data_out1,AddRTC
   call Write
   add s5,0x01
   load Data_out1,0x42
   rdmem Data_out2,(s5)
   wrPrt Data_out1,AddRTC
   call Write
   add s5,0x01
   load Data_out1,0x43
   rdmem Data_out2,(s5)
   wrPrt Data_out1,AddRTC
   call Write 
   load s5,0x00
   ret	
;-------------------------------------------------------------------------------------------
;---------------------------------------CONTROL DE VGA--------------------------------------
Control_VGA:
	load s5,0x00
	rdmem Dato_SP,(s5);lee el dato en 0x00 de SP Mem
	wrPrt Dato_SP, Seg_R; escribe en el puerto de salida dato de seg de SP mem
	add s5,0x01;0x01
	rdmem Dato_SP,(s5)
	wrPrt Dato_SP, Min_R;escribe en el puerto de salida dato de min de SP mem
	add s5,0x01;0x02
	rdmem Dato_SP,(s5)
	wrPrt Dato_SP, Hor_R;escribe en el puerto de salida dato de min de SP mem
	add s5,0x01;0x03
	rdmem Dato_SP,(s5)
	wrPrt Dato_SP, Dia_F;escribe en el puerto de salida dato de min de SP mem
	add s5,0x01;0x04
	rdmem Dato_SP,(s5)
	wrPrt Dato_SP, Mes_F;escribe en el puerto de salida dato de min de SP mem
	add s5,0x01;0x05
	rdmem Dato_SP,(s5)
	wrPrt Dato_SP, Year_F;escribe en el puerto de salida dato de min de SP mem
	add s5,0x01;0x06
	rdmem Dato_SP,(s5)
	wrPrt Dato_SP, Seg_T;escribe en el puerto de salida dato de min de SP mem
	add s5,0x01;0x07
	rdmem Dato_SP,(s5)
	wrPrt Dato_SP, Min_T;escribe en el puerto de salida dato de min de SP mem
	add s5,0x01;0x08
	rdmem Dato_SP,(s5)
	wrPrt Dato_SP, Hor_T;escribe en el puerto de salida dato de min de SP mem
	load s5,0x00;
	ret
	
;-------------------------------------------------------------------------------------------

PSReady:
	rdPrt Listo,PS2
	comp Listo,0x01
	jumP NZ PSReady
	ret

;-------------------------------------------------------------------------------------------
;-----------------------Lee Puerto y guarda dato de pS2, lo muestra en pantalla------------
Read_Port:
	call PSReady
	rdPrt DataProg, Dato_In;lee el dato del puerto	
	SL0 DataProg
	SL0 DataProg
	SL0 DataProg
	SL0 DataProg
	load PC,0x01
	wrPrt PC,Var
	load PC,0x00
	wrPrt PC,Var	
	call PSReady 
	rdPrt DataProg2,Dato_In;lee el dato del puerto	
	load PC,0x01
	wrPrt PC,Var
	load PC,0x00
	wrPrt PC,Var	
	add DataProg,DataProg2
	wrmem DataProg,(s5);guarda el dato en memoria
	wrPrt DataProg,(sF)		
	add s5,0x01 
	add sF,0x01
	ret

;--------------------------------------------------------------------------------------------------
;-----------------------Parametros para programar y leer puertos de datos a enviar----------------
Parametros:	
	rdPrt Reloj,Param;lee puerto
	load PC,0x01
	wrPrt PC,Var
	load PC,0x00
	wrPrt PC,Var
	comp Reloj,0x05;F1
	call Z ProgReloj;salta a programar reloj 
	comp Reloj, 0x06;F2
	call Z ProgFecha;salta a programar fecha
	comp Reloj,0x04;F3
	call Z ProgTimer;salta a programar timer
	load Reloj,0x00
	ret
;--------------------------------------------------------------------------------------------------
;---------------------------Programar registros de RTC en el espacio de Reloj----------------------	
ProgReloj:
	load sF,0x04
	load s5,0x00
	call PSReady
	rdPrt DataProg, Dato_In;lee el dato del puerto
	comp DataProg,0x1C
	Call Z Hour12
	load PC,0x01
	wrPrt PC,Var
	load PC,0x00
	wrPrt PC,Var
	call Read_Port;segundos
	call Read_Port;minutos
	call Read_Port;horas
	call RegClock
	load Data_out1,0xF1
	load Data_out2,0xF1
	call Write
	load sF,0x00
	load s5,0x00
	ret
;--------------------------------------------------------------------------------------------------
;---------------------------Programar registros de RTC en el espacio de Fecha----------------------
ProgFecha:
	load sF,0x07
	load s5,0x03
	call Read_Port;segundos
	call Read_Port;minutos
	call Read_Port;horas
	call RegFecha
	load Data_out1,0xF1
	load Data_out2,0xF1
	call Write
	load sF,0x00
	load s5,0x00
	ret
;--------------------------------------------------------------------------------------------------
;---------------------------Programar registros de RTC en el espacio de Timer----------------------
ProgTimer:
	load sF,0x0A
	load s5,0x06
	call PSReady
	rdPrt DataProg, Dato_In;lee el dato del puerto
	comp DataProg,0x2C
	Call Z AlarmOff
	load PC,0x01
	wrPrt PC,Var
	load PC,0x00
	wrPrt PC,Var
	call Read_Port;segundos
	call Read_Port;minutos
	call Read_Port;horas
	call RegTimer
	load Data_out1,0xF2
	load Data_out2,0xF2
	call Write
	load Data_out1,0x00
	load Data_out2,0x08
	call Write
	load sF,0x00
	load s5,0x00
	ret

AlarmOff:
	
	load Data_out1,0x01
	load Data_out2,0x04
	call Write
	load Data_out1,0x41
	load Data_out2,0x00
	call Write
	load Data_out1,0x42
	load Data_out2,0x00
	call Write
	load Data_out1,0x43
	load Data_out2,0x00
	call Write
	load Data_out1,0x00
	load Data_out2,0x00
	call Write
	jump start
Hour12:
	load Data_out1,0x00
	load Data_out2,0x10
	call Write
	ret

	
	
;--------------------------------------------------------------------------------------------------